<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>lv.iljapavlovs.cukesrest</groupId>
    <artifactId>cukes-rest-sample</artifactId>
    <version>1.0.0</version>

    <name>Cucumber e2eTest Project</name>
    <description>End-to-End testing of Backend</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <cukes-rest.version>0.2.24</cukes-rest.version>
        <surefire.fork.count>2</surefire.fork.count>
        <junit.version>4.12</junit.version>
        <maven-cucumber-reporting.version>3.6.0</maven-cucumber-reporting.version>

        <java.version>1.8</java.version>
        <!--Dependency Versions-->

        <junit.version>4.12</junit.version>
        <!--Plugin Versions-->
        <maven-compiler-plugin.version>3.6.1</maven-compiler-plugin.version>
        <cucumber.version>1.2.5</cucumber.version>
        <maven-surefire-plugin.version>2.19.1</maven-surefire-plugin.version>
        <maven-cucumber-reporting.version>3.6.0</maven-cucumber-reporting.version>
        <cucumber-jvm-parallel-plugin.version>3.0.0</cucumber-jvm-parallel-plugin.version>
        <threads>4</threads>
        <cucumberOutputDirectory>${project.build.directory}/cucumber</cucumberOutputDirectory>
        <include.runners/>
    </properties>

    <dependencies>
        <dependency>
            <groupId>lv.ctco.cukesrest</groupId>
            <artifactId>cukes-rest</artifactId>
            <version>${cukes-rest.version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>singleThreaded</id>
            <properties>
                <threads>1</threads>
            </properties>
        </profile>
        <!--'parallel' profile is executing tests in parallel - one "Runner" class per thread-->
        <profile>
            <id>parallel</id>
            <properties>
                <include.runners>**/*Test.java</include.runners>
            </properties>
        </profile>
        <!--'parallelPlugin' profile is executing tests in parallel - with cucumber-jvm-parallel-plugin-->
        <profile>
            <id>parallelPlugin</id>
            <properties>
                <include.runners>**/Parallel*IT.class</include.runners>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.temyers</groupId>
                        <artifactId>cucumber-jvm-parallel-plugin</artifactId>
                        <version>${cucumber-jvm-parallel-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>generateRunners</id>
                                <phase>generate-test-sources</phase>
                                <goals>
                                    <goal>generateRunners</goal>
                                </goals>
                                <configuration>
                                    <!-- Mandatory -->
                                    <!-- comma separated list of package names to scan for glue code -->
                                    <glue>
                                        <package>lv.iljapavlovs.cukesrest.steps</package>
                                        <package>lv.ctco.cukesrest.api</package>
                                    </glue>
                                    <!-- These are optional, with the default values -->
                                    <!-- Where to output the generated tests -->
                                    <outputDirectory>${project.build.directory}/generated-test-sources/cucumber
                                    </outputDirectory>
                                    <!-- The directory, which must be in the root of the runtime classpath, containing your feature files.  -->
                                    <featuresDirectory>src/test/resources</featuresDirectory>
                                    <!-- Directory where the cucumber report files shall be written  -->
                                    <cucumberOutputDir>${cucumberOutputDirectory}</cucumberOutputDir>
                                    <!-- List of cucumber plugins. When none are provided the json formatter is used. For more
                                         advanced usage see section about configuring cucumber plugins -->
                                    <plugins>
                                        <plugin>
                                            <!--The available options are junit, testng, html, pretty, json, usage and rerun -->
                                            <name>json</name>
                                        </plugin>
                                        <plugin>
                                            <!--The available options are junit, testng, html, pretty, json, usage and rerun -->
                                            <name>html</name>
                                        </plugin>
                                        <plugin>
                                            <name>pretty</name>
                                        </plugin>
                                    </plugins>
                                    <!-- CucumberOptions.strict property -->
                                    <strict>true</strict>
                                    <!-- CucumberOptions.monochrome property -->
                                    <monochrome>false</monochrome>
                                    <!--The tags to run, maps to CucumberOptions.tags property-->
                                    <!--<tags>"@all"</tags>-->
                                    <tags>
                                        <tag>@all</tag>
                                        <!--Currently multiple tags not working-->
                                        <!--<tag>@cheese</tag>-->
                                        <!--<tag>@milk</tag>-->
                                    </tags>
                                    <!-- If set to true, only feature files containing the required tags shall be generated. -->
                                    <filterFeaturesByTags>true</filterFeaturesByTags>
                                    <!-- Generate TestNG runners instead of JUnit ones. -->
                                    <useTestNG>false</useTestNG>
                                    <!-- The naming scheme to use for the generated test classes.  One of 'simple' or 'feature-title' -->
                                    <namingScheme>simple</namingScheme>
                                    <!-- The class naming pattern to use.  Only required/used if naming scheme is 'pattern'.-->
                                    <namingPattern>Parallel{c}IT</namingPattern>
                                    <!-- One of [SCENARIO, FEATURE]. SCENARIO generates one runner per scenario.  FEATURE generates a runner per feature. -->
                                    <parallelScheme>SCENARIO</parallelScheme>
                                    <!-- Specify a custom template for the generated sources (this is a path relative to the project base directory) -->
                                    <!--<customVmTemplate>src/test/resources/custom-runner-template.java.vm</customVmTemplate>-->
                                    <!-- Specify a custom package name for generated sources. Default is no package.-->
                                    <!--<packageName></packageName>-->
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
                <version>${maven-compiler-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <testFailureIgnore>true</testFailureIgnore>
                    <forkCount>${threads}</forkCount>
                    <reuseForks>false</reuseForks>
                    <includes>
                        <!--<include>**/*CukesTest.java</include>-->
                        <include>${include.runners}</include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>net.masterthought</groupId>
                <artifactId>maven-cucumber-reporting</artifactId>
                <version>${maven-cucumber-reporting.version}</version>
                <executions>
                    <execution>
                        <id>execution</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <projectName>cucumber-jvm-example</projectName>
                            <outputDirectory>${project.build.directory}/site/cucumber-reports</outputDirectory>
                            <cucumberOutput>${cucumberOutputDirectory}</cucumberOutput>
                            <!--<skippedFails>true</skippedFails>-->
                            <buildNumber>${project.version}</buildNumber>
                            <!--shows additional column in report - 'Device'-->
                            <!--<parallelTesting>true</parallelTesting>-->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>